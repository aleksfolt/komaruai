import json
import os
import requests
from collections import defaultdict, deque
from aiocryptopay import AioCryptoPay, Networks
from aiogram import Router, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
import asyncio
import google.generativeai as genai
import aiofiles
from google.generativeai.types import HarmCategory, HarmBlockThreshold

import config
from callbacks import verify_payment_call
from functions import check_and_update_premium_status, save_photo, upload_to_gemini, extract_json, check_image_rate, \
    contains_stop_words, check_message_rate, remaining_messages, remaining_images
from kb import back_to_menu, payment_crypto_keyboard
from kandinsky import Text2ImageAPI
from texts import bot_prompt

genai.configure(api_key="AIzaSyDIulVh4cgNgZ_OKgV4T3LrDid6-HqoOMU")
crypto = AioCryptoPay(token=config.AIO_TOKEN, network=Networks.MAIN_NET)

generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
    system_instruction=bot_prompt,
    safety_settings={
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE
        }
)

router = Router()
user_chat_histories = defaultdict(list)
user_message_timestamps = defaultdict(deque)
user_image_timestamps = defaultdict(deque)

executor = ThreadPoolExecutor()


async def setup_router(dp, bot):
    @router.message(Command("start"))
    async def start_handler(msg: Message):
        chat_id = msg.chat.id
        await bot.forward_message(chat_id=chat_id, from_chat_id=config.TARGET_CHAT_ID, message_id=2)

    @router.message(F.photo)
    async def handle_photo(msg: Message):
        try:
            caption = msg.caption or ""
            if not caption.startswith("/kmr"):
                return

            user_id = msg.from_user.id
            is_premium, _ = await check_and_update_premium_status(user_id)
            user_query = caption[5:].strip()
            if not user_query:
                await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /kmr.")
                return

            wait_message = await msg.reply("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            photo = msg.photo[-1]
            file_path = await save_photo(photo, user_id, bot)
            gemini_file = [await upload_to_gemini(file_path, mime_type="image/jpeg")]
            chat_history = user_chat_histories[user_id]
            chat_history.append({"role": "user", "parts": [gemini_file[0]]})
            chat_session = model.start_chat(history=chat_history)
            response = chat_session.send_message(user_query)

            chat_history.append({"role": "model", "parts": [response.text]})

            response_json = extract_json(response.text)
            if response_json and 'image' in response_json and 'prompt' in response_json['image']:
                can_generate_image, time_left_img = check_image_rate(user_id, is_premium)
                if not can_generate_image:
                    await wait_message.edit_text(
                        text=f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_left_img.total_seconds() // 60:.0f} –º–∏–Ω—É—Ç.\n–ó–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–µ–º–∏—É–º–∞! –ö–æ–º–∞–Ω–¥–∞ /premium.")
                    return

                user_image_timestamps[user_id].append(datetime.now())

                prompt = response_json['image']['prompt']
                message = response_json['image'].get('message', 'Here is your image üòä')
                if prompt.strip():
                    await wait_message.edit_text(text="–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                    api = Text2ImageAPI(
                        'https://api-key.fusionbrain.ai/',
                        '2968768A141CA34D4EA4EBF0F2C0C6F3',
                        '6EA7E0E92F1CB6C99649840F5CF8D02F'
                    )
                    model_id = await asyncio.get_event_loop().run_in_executor(executor, api.get_model)
                    uuid = await asyncio.get_event_loop().run_in_executor(executor,
                                                                          lambda: api.generate(prompt, model_id))
                    result = await asyncio.get_event_loop().run_in_executor(executor,
                                                                            lambda: api.check_generation(uuid))
                    if result:
                        for path in result:
                            photo = FSInputFile(path)
                            await bot.send_photo(chat_id=msg.chat.id, photo=photo, caption=message,
                                                 reply_to_message_id=msg.message_id)
                            await wait_message.delete()
                            os.remove(path)
                    return

            if contains_stop_words(response.text):
                await wait_message.edit_text(text="–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –∏–ª–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.")
                os.remove(file_path)
                return
            try:
                await wait_message.edit_text(text=response.text, reply_markup=await back_to_menu(user_id),
                                             parse_mode=ParseMode.MARKDOWN)
                os.remove(file_path)
            except Exception as e:
                os.remove(file_path)
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (Markdown): {e}")
                try:
                    await wait_message.edit_text(text=response.text, reply_markup=await back_to_menu(user_id))
                    os.remove(file_path)
                except Exception as inner_e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ Markdown): {inner_e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await msg.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å.")

    @router.message(F.text.casefold().startswith("/kmr".casefold()))
    async def gm_handler(msg: Message):
        global response, user_id, wait_msg
        wait_msg = None
        try:
            user_id = msg.from_user.id
            is_premium, _ = await check_and_update_premium_status(user_id)

            can_send_message, time_left_msg = check_message_rate(user_id, is_premium)
            if not can_send_message:
                await msg.reply(
                    text=f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_left_msg.total_seconds() // 60:.0f} –º–∏–Ω—É—Ç.\n–ó–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–µ–º–∏—É–º–∞! –ö–æ–º–∞–Ω–¥–∞ /premium.")
                return

            user_message_timestamps[user_id].append(datetime.now())

            user_input = ' '.join(msg.text.split()[1:])
            if not user_input.strip():
                await msg.reply(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /kmr.")
                return

            if contains_stop_words(user_input):
                await msg.reply(text="–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –∏–ª–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.")
                return

            wait_msg = await msg.reply(text="...")

            chat_history = user_chat_histories[user_id]

            chat_session = model.start_chat(history=chat_history)
            response = chat_session.send_message(user_input)

            chat_history.append({"role": "user", "parts": [user_input]})
            chat_history.append({"role": "model", "parts": [response.text]})

            response_json = extract_json(response.text)
            if response_json and 'image' in response_json and 'prompt' in response_json['image']:
                can_generate_image, time_left_img = check_image_rate(user_id, is_premium)
                if not can_generate_image:
                    if wait_msg:
                        await wait_msg.edit_text(
                            text=f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_left_img.total_seconds() // 60:.0f} –º–∏–Ω—É—Ç.\n–ó–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–µ–º–∏—É–º–∞! –ö–æ–º–∞–Ω–¥–∞ /premium.")
                    return

                user_image_timestamps[user_id].append(datetime.now())

                prompt = response_json['image']['prompt']
                message = response_json['image'].get('message', 'Here is your image üòä')
                if prompt.strip():
                    if wait_msg:
                        await wait_msg.edit_text(text="–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                    api = Text2ImageAPI(
                        'https://api-key.fusionbrain.ai/',
                        '2968768A141CA34D4EA4EBF0F2C0C6F3',
                        '6EA7E0E92F1CB6C99649840F5CF8D02F'
                    )
                    model_id = await asyncio.get_event_loop().run_in_executor(executor, api.get_model)
                    uuid = await asyncio.get_event_loop().run_in_executor(executor,
                                                                          lambda: api.generate(prompt, model_id))
                    result = await asyncio.get_event_loop().run_in_executor(executor,
                                                                            lambda: api.check_generation(uuid))
                    if result:
                        for path in result:
                            photo = FSInputFile(path)
                            await bot.send_photo(chat_id=msg.chat.id, photo=photo, caption=message,
                                                 reply_to_message_id=msg.message_id)
                            try:
                                if wait_msg:
                                    await wait_msg.delete()
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            os.remove(path)
                    return

            if contains_stop_words(response.text):
                if wait_msg:
                    await wait_msg.edit_text(text="–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –∏–ª–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.")
                return

            try:
                if wait_msg:
                    await wait_msg.edit_text(text=response.text, reply_markup=await back_to_menu(user_id),
                                             parse_mode=ParseMode.MARKDOWN)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (Markdown): {e}")
                try:
                    if wait_msg:
                        await wait_msg.edit_text(text=response.text, reply_markup=await back_to_menu(user_id))
                except Exception as inner_e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ Markdown): {inner_e}")
                    await msg.answer(user_id=6184515646, text=str(inner_e))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            try:
                if wait_msg:
                    await wait_msg.edit_text(
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                        reply_markup=await back_to_menu(user_id))
                await msg.answer(user_id=6184515646, text=str(e))
            except Exception as inner_e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {inner_e}")
                await msg.answer(user_id=6184515646, text=str(inner_e))

    @router.message(Command("menu"))
    async def menu_handler(msg: Message):
        try:
            user_id = msg.from_user.id
            is_premium, premium_expiration = await check_and_update_premium_status(user_id)
            premium_message = f"–ü—Ä–µ–º–∏—É–º: –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {premium_expiration}" if is_premium else "–ü—Ä–µ–º–∏—É–º: –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"

            remaining_msg = remaining_messages(user_id, is_premium)
            remaining_img = remaining_images(user_id, is_premium)

            response = (
                f"üîê {msg.from_user.first_name} –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üíé {premium_message}\n"
                f"üìÑ –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Komaru Assistant: {remaining_msg}\n"
                f"üñº –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {remaining_img}\n"
            )

            await msg.reply(text=response)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é: {e}")
            await msg.reply(text=f"–û—à–∏–±–∫–∞: {e}")

    @router.message(F.text.casefold().startswith("/img".casefold()))
    async def image_handler(msg: Message):
        try:
            user_id = msg.from_user.id
            is_premium, _ = await check_and_update_premium_status(user_id)

            can_generate_image, time_left_img = check_image_rate(user_id, is_premium)
            if not can_generate_image:
                await msg.reply(
                    text=f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_left_img.total_seconds() // 60:.0f} –º–∏–Ω—É—Ç.\n–ó–∞–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∫—É–ø–∫–æ–π –ø—Ä–µ–º–∏—É–º–∞! –ö–æ–º–∞–Ω–¥–∞ /premium.")
                return

            user_image_timestamps[user_id].append(datetime.now())

            user_input = ' '.join(msg.text.split()[1:])
            if not user_input.strip():
                await msg.reply(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /img.")
                return

            if contains_stop_words(user_input):
                await msg.reply(text="–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –∏–ª–∏ —Ç–æ–∫—Å–∏—á–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.")
                return

            wait_message = await msg.reply("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

            api = Text2ImageAPI(
                'https://api-key.fusionbrain.ai/',
                '2968768A141CA34D4EA4EBF0F2C0C6F3',
                '6EA7E0E92F1CB6C99649840F5CF8D02F'
            )
            model_id = await asyncio.get_event_loop().run_in_executor(executor, api.get_model)
            uuid = await asyncio.get_event_loop().run_in_executor(executor, lambda: api.generate(user_input, model_id))
            result = await asyncio.get_event_loop().run_in_executor(executor, lambda: api.check_generation(uuid))
            if result:
                for path in result:
                    photo = FSInputFile(path)
                    await bot.send_photo(chat_id=msg.chat.id, photo=photo, reply_to_message_id=msg.message_id)
                    os.remove(path)  # Remove the image after sending
                    print(f"result: {path}")
                await wait_message.delete()
            else:
                await wait_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await msg.reply(text=f"–û—à–∏–±–∫–∞: {e}. –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω–∞–¥–æ –≤—Å—è–∫—É—é —Ö–µ—Ä–Ω—é –≤ –ø—Ä–æ–º–ø—Ç –ø–∏—Å–∞—Ç—å.")

    @router.message(Command("premium"))
    async def buy_premium(msg: Message):
        try:
            user_id = msg.from_user.id
            try:
                invoice = await crypto.create_invoice(asset='USDT', amount=1)
                if not invoice:
                    await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return None

                markup = await payment_crypto_keyboard(invoice.invoice_id, invoice.bot_invoice_url)

                response = (
                    f"‚ùì –ß—Ç–æ –¥–∞–µ—Ç –ø—Ä–µ–º–∏—É–º?\n\nüñº –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 30 —Ä–∞–∑ –∑–∞ 2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 10.\n"
                    f"‚úçÔ∏è –î–µ–ª–∞—Ç—å 250 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞ 2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 70.\n\n"
                    f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –†–µ–∫–≤–∏–∑–∏—Ç—ã: {invoice.bot_invoice_url}"
                )
                await bot.send_message(user_id, response, reply_markup=markup)

                await msg.reply("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

                return invoice

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
                await msg.reply(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return None

        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}"
            print(error_message)
            await bot.send_message(user_id, error_message)
            return None

    @router.callback_query(F.data.startswith("verify_payment"))
    async def verify_payment(call):
        await verify_payment_call(call, bot)

    @router.callback_query(F.data.startswith("clear_chat:"))
    async def clear_chat_handler(callback_query: CallbackQuery):
        try:
            _, action_user_id = callback_query.data.split(":")
            if str(callback_query.from_user.id) != action_user_id:
                await callback_query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —á—É–∂–æ–π —á–∞—Ç.", show_alert=True)
                return

            user_chat_histories[int(action_user_id)] = []
            await callback_query.answer(text="–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
            await callback_query.answer()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")
            await callback_query.message.reply(text=f"–û—à–∏–±–∫–∞: {e}")
