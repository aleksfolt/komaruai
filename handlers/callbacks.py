import json
from datetime import timedelta, datetime
import aiofiles
from aiocryptopay import AioCryptoPay, Networks
import config

crypto = AioCryptoPay(token=config.AIO_TOKEN, network=Networks.MAIN_NET)


async def activate_premium(user_id, days):
    try:
        premium_duration = timedelta(days=days)
        async with aiofiles.open('premium_users.json', 'r+') as file:
            data = json.loads(await file.read())
            if str(user_id) in data:
                current_expiration = datetime.strptime(data[str(user_id)], '%Y-%m-%d')
                new_expiration_date = current_expiration + premium_duration
            else:
                new_expiration_date = datetime.now() + premium_duration

            data[str(user_id)] = new_expiration_date.strftime('%Y-%m-%d')
            await file.seek(0)
            await file.write(json.dumps(data, ensure_ascii=False, indent=4))
            await file.truncate()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞: {e}")


async def verify_payment_call(call, bot):
    parts = call.data.split('_')
    print(parts)
    if len(parts) < 3:
        await call.message.answer(call.message.chat.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")
        return

    action, context, invoice = parts[0], parts[1], parts[2]

    try:
        print("Invoice ID:", invoice)
        invoice_stat = await crypto.get_invoices(invoice_ids=int(invoice))
        if invoice_stat.status == 'paid':
            await activate_premium(call.from_user.id, 30)
            await call.message.answer("üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ü—Ä–µ–º–∏—É–º–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏.\n\n–ß—Ç–æ –¥–∞–µ—Ç –ø—Ä–µ–º–∏—É–º?\n–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 30 —Ä–∞–∑ –∑–∞ 2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 10.\n–î–µ–ª–∞—Ç—å 250 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞ 2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 70.")
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            await bot.send_message(call.from_user.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await bot.send_message(call.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
